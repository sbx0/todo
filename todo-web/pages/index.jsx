import {useEffect, useState} from "react";
import styles from '../styles/Home.module.css';
import Head from 'next/head';

import TaskInput from "../components/task/TaskInput";
import TaskItem from "../components/task/TaskItem";
import TaskCategory from "../components/task/TaskCategory";
import TaskHidden from "../components/task/TaskHidden";
import {getCache} from "../components/Cache";
import useFetch from "../hooks/useFetch";
import {saveApi, updateApi} from "../apis/taskApi";
import Loading from "../components/Loading";
import Script from "next/script";
import NavigationBar from "../components/NavigationBar";

export default function Home() {
    const [loading, setLoading] = useState(false);
    const [page, setPage] = useState(1);
    const [pageSize, setPageSize] = useState(20);
    const [newTask, setNewTask] = useState('');
    const [categoryId, setCategoryId] = useState(() => {
        // just for next.js
        if (typeof window !== 'undefined') {
            let cache = getCache('categoryId');
            if (cache == null) {
                cache = '0';
            }
            return parseInt(cache);
        } else {
            return 0;
        }
    });
    const [refresh, setRefresh] = useState(false);
    const taskPaging = useFetch({
        method: 'POST',
        url: '/api/task/paging',
        params: {
            page: page, pageSize: pageSize, categoryId: categoryId, taskStatus: 0
        },
        setLoading: setLoading
    });

    useEffect(() => {
        taskPaging.refresh();
    }, [refresh]);

    const saveNewTask = () => {
        let taskName = newTask;
        setNewTask('');
        if (taskName == null) {
            return;
        }
        if (taskName === '') {
            return;
        }
        if (taskName.trim() === '') {
            return;
        }
        saveApi({
            taskName: taskName,
            categoryId: categoryId
        }).then(() => {
            taskPaging.refresh();
        })
    }

    const setTaskStatusCompleted = (task) => {
        updateApi({
            ...task,
            taskStatus: 1
        }).then(() => {
            taskPaging.refresh();
            setRefresh(!refresh);
        })
    }

    const setTaskStatusUndo = (task) => {
        updateApi({
            ...task,
            taskStatus: 0
        }).then(() => {
            taskPaging.refresh();
            setRefresh(!refresh);
        })
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Next Todo App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
                <Script defer src="https://static.cloudflareinsights.com/beacon.min.js"
                        data-cf-beacon="{'token': '2d9d5be43b34404abb5064a088d50b68'}"></Script>
            </Head>

            <main className={styles.main}>
                <div className={styles.operationArea}>
                    <TaskInput newTask={newTask}
                               setNewTask={setNewTask}
                               saveNewTask={saveNewTask}/>
                </div>
                <div className={styles.contentArea}>
                    <TaskCategory categoryId={categoryId}
                                  setCategoryId={setCategoryId}/>
                    <Loading active={loading}></Loading>
                    {taskPaging.data?.map((one) =>
                        <TaskItem key={'taskInfo_' + one.id}
                                  one={one}
                                  setTaskStatusUndo={setTaskStatusUndo}
                                  setTaskStatusCompleted={setTaskStatusCompleted}/>)}
                    <TaskHidden categoryId={categoryId}
                                refresh={refresh}
                                setTaskStatusUndo={setTaskStatusUndo}
                                setTaskStatusCompleted={setTaskStatusCompleted}
                                setLoading={setLoading}/>
                </div>
            </main>

            <NavigationBar active={0}/>
        </div>
    )
}
